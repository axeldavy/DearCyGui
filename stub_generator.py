import copy
import dearcygui as dcg
import inspect

level1 = "    "
level2 = level1 + level1
level3 = level2 + level1

def remove_jumps_start_and(s : str | None):
    if s is None:
        return None
    if len(s) < 2:
        return s
    if s[0] == '\n':
        s = s[1:]
    if s[-1] == '\n':
        s = s[:-1]
    return s

def indent(s: list[str] | str, trim_start=False):
    was_str = isinstance(s, str)
    if was_str:
        s = s.split("\n")
    s = [level1 + sub_s for sub_s in s]
    if trim_start:
        s0 = s[0].split(" ")
        s0 = [sub_s0 for sub_s0 in s0 if len(sub_s0) > 0]
        s[0] = " ".join(s0)
    if was_str:
        s = "\n".join(s)
    return s


hardcoded = {
    "parent": "baseItem | None",
    "font": "Font",
    "children": "list[baseItem]",
    "previous_sibling": "baseItem | None",
    "next_sibling": "baseItem | None",
    "color" : "int | tuple[int, int, int] | tuple[int, int, int, int] | tuple[float, float, float] | tuple[float, float, float, float]",
    "fill" : "int | tuple[int, int, int] | tuple[int, int, int, int] | tuple[float, float, float] | tuple[float, float, float, float]"
}

def typename(name, value):
    default = None if value is None else type(value).__name__
    return hardcoded.get(name, default)


def generate_docstring_for_class(object_class, instance):
    class_attributes = [v[0] for v in inspect.getmembers_static(object_class)]
    try:
        attributes = dir(instance)
    except:
        attributes = class_attributes
        pass
    dynamic_attributes = set(attributes).difference(set(class_attributes))
    disabled_properties = []
    read_only_properties = []
    writable_properties = []
    dynamic_properties = []
    methods = []
    properties = set()
    default_values = dict()
    docs = dict()
    for attr in sorted(attributes):
        if attr[:2] == "__":
            continue
        attr_inst = getattr(object_class, attr, None)
        if attr_inst is not None and inspect.isbuiltin(attr_inst):
            continue
        is_dynamic = attr in dynamic_attributes
        docs[attr] = remove_jumps_start_and(getattr(attr_inst, '__doc__', None))
        default_value = None
        is_accessible = False
        is_writable = False
        is_property = inspect.isdatadescriptor(attr_inst)
        is_class_method = inspect.ismethoddescriptor(attr_inst)
        try:
            if instance is None:
                raise ValueError
            default_value = getattr(instance, attr)
            is_accessible = True
            setattr(instance, attr, default_value)
            is_writable = True
        except AttributeError:
            pass
        except (TypeError, ValueError, OverflowError):
            is_writable = True
            pass
        if is_property:
            if is_writable:
                writable_properties.append(attr)
                properties.add(attr)
                default_values[attr] = default_value
            elif is_accessible:
                read_only_properties.append(attr)
                properties.add(attr)
                default_values[attr] = default_value
            else:
                disabled_properties.append(attr)
        elif is_dynamic and is_accessible:
            dynamic_properties.append(attr)
            properties.add(attr)
            default_values[attr] = default_value
        elif is_class_method:
            methods.append(attr_inst)

    result = []
    try:
        parent_class = object_class.__bases__[0]
        result += [
            f"class {object_class.__name__}({parent_class.__name__}):"
        ]
    except:
        result += [
            f"class {object_class.__name__}:"
        ]
    docstring = getattr(object_class, '__doc__', None)
    docstring = remove_jumps_start_and(docstring)
    if docstring is not None:
        result += [
            level1 + '"""',
            docstring,
            level1 + '"""'
        ]
    for method in [object_class.__init__] + methods:
        try:
            call_sig = inspect.signature(method)
        except:
            continue
        additional_properties = copy.deepcopy(properties)
        additional_properties = [p for p in additional_properties if p not in read_only_properties]
        call_str = level1 + "def " + method.__name__ + "("
        params_str = []
        kwargs_docs = []
        for (_, param) in call_sig.parameters.items():
            if method.__name__ not in ["__init__", "configure", "initialize"]:
                params_str.append(str(param))
                continue
            try:
                additional_properties.remove(param.name) 
            except:
                pass
            if param.name == 'args' and method.__name__ == "__init__":
                # Annotation seems incorrect for cython generated __init__
                params_str.append("context : Context")
                continue
            if param.name == 'kwargs':
                for prop in additional_properties:
                    if docs[prop] is not None:
                        doc = docs[prop]
                        if doc is not None:
                            doc = doc.split("attribute:")
                            if len(doc) == 1:
                                doc = doc[0]
                            elif len(doc) == 2:
                                doc = doc[1]
                            else:
                                assert(False)
                        doc = indent(doc, trim_start=True)
                        kwargs_docs.append(f"{level2}{prop}: {doc}")
                    v = default_values[prop]
                    v_type = typename(prop, v)
                    if v_type is None:
                        v_type = "Any"
                        v = "..."
                    elif v is not None and '<' in str(v): # default is a class
                        v = "..."
                    elif v_type == "NoneType": # Likely a class
                        v_type = "Any"
                        v = "..."
                    elif isinstance(v, str):
                        v = f'"{v}"'
                    if issubclass(object_class, dcg.SharedValue) and method.__name__ == "__init__":
                        params_str.append(f"{prop} : {v_type}")
                    else:
                        params_str.append(f"{prop} : {v_type} = {v}")
            else:
                params_str.append(str(param))
        call_str += ", ".join(params_str) + ')'
        if call_sig.return_annotation == inspect.Signature.empty:
            call_str += ':'
        else:
            call_str += f' -> {call_sig.return_annotation}:'
        result.append(call_str)
        docstring = remove_jumps_start_and(getattr(method, '__doc__', None))
        if len(kwargs_docs) > 0:
            kwargs_docs = "\n".join(kwargs_docs)
            if docstring is None:
                docstring = kwargs_docs
            else:
                docstring = "\n" + kwargs_docs
        if docstring is not None:
            result += [
                level2 + '"""',
                docstring,
                level2 + '"""'
            ]
        result.append(level2 + "...")
        result.append("\n")

    if hasattr(object_class, "__enter__"):
        result.append(f"{level1}def __enter__(self) -> {object_class.__name__}:")
        result.append(f"{level2}...")
        result.append("\n")

    for property in properties:
        result.append(level1 + "@property")
        definition = f"def {property}(self)"
        default_value = default_values.get(property, None)
        tname = typename(property, default_value)
        if tname is None:
            result.append(f"{level1}{definition}:")
        else:
            result.append(f"{level1}{definition} -> {tname}:")
        docstring = docs[property]
        if docstring is not None:
            if docstring[0] == " ":
                result += [
                    level2 + '"""',
                    docstring,
                    level2 + '"""'
                ]
            else:
                result += [
                    level2 + '"""' + docstring,
                    level2 + '"""'
                ]
        result.append(level2 + "...")
        result.append("\n")
        if property in read_only_properties:
            continue

        result.append(f"{level1}@{property}.setter")
        if tname is None:
            result.append(f"{level1}def {property}(self, value):")
        else:
            result.append(f"{level1}def {property}(self, value : {tname}):")
        result.append(level2 + "...")
        result.append("\n")

    return result







def get_pyi_for_classes(C):
    def is_item_sub_class(name, targets):
        try:
            item = getattr(dcg, name)
            for target in targets:
                if issubclass(item, target):
                    return True
        except Exception:
            return False
    filter_names = {
        "All": [dcg.baseItem, dcg.SharedValue],
        "Ui items": [dcg.uiItem, dcg.Texture, dcg.Font],
        "Handlers": [dcg.baseHandler],
        "Drawings": [dcg.drawingItem, dcg.Texture],
        "Plots": [dcg.plotElement, dcg.Plot, dcg.PlotAxisConfig, dcg.PlotLegendConfig],
        "Themes": [dcg.baseTheme],
        "Values": [dcg.SharedValue]
    }
    parent_classes = [dcg.Context, dcg.baseItem, dcg.SharedValue]
    dcg_items = dir(dcg)
    # remove items not starting with an upper case,
    # which are mainly for internal use, or items finishing by _
    #dcg_items = [i for i in dcg_items if i[0].isupper() and i[-1] != '_']
    #remove items that are not subclasses of the target.
    dcg_items = [i for i in dcg_items if is_item_sub_class(i, parent_classes)]
    result = []
    for name in dcg_items:
        object_class = getattr(dcg, name)
        if name == "Viewport":
            instance = C.viewport
        elif name == "Context":
            instance = C
        elif issubclass(object_class, dcg.SharedValue):
            instance = None
            for val in [0, (0, 0, 0, 0), 0., "", None]:
                try:
                    instance = object_class(C, val)
                    break
                except:
                    pass
        else:
            instance = object_class(C, attach=False)
        result += generate_docstring_for_class(object_class, instance)
    return "\n".join(result)

with open("dearcygui/core.pyi", "w") as f:
    f.write('''
from typing import Any
from enum import IntEnum

class constants:
    mvGraphicsBackend_D3D11 = ...
    mvGraphicsBackend_D3D12 = ...
    mvGraphicsBackend_VULKAN = ...
    mvGraphicsBackend_METAL = ...
    mvGraphicsBackend_OPENGL = ...
    mvMouseButton_Left = ...
    mvMouseButton_Right = ...
    mvMouseButton_Middle = ...
    mvMouseButton_X1 = ...
    mvMouseButton_X2 = ...
    mvKey_ModDisabled = ...
    mvKey_None = ...
    mvKey_0 = ...
    mvKey_1 = ...
    mvKey_2 = ...
    mvKey_3 = ...
    mvKey_4 = ...
    mvKey_5 = ...
    mvKey_6 = ...
    mvKey_7 = ...
    mvKey_8 = ...
    mvKey_9 = ...
    mvKey_A = ...
    mvKey_B = ...
    mvKey_C = ...
    mvKey_D = ...
    mvKey_E = ...
    mvKey_F = ...
    mvKey_G = ...
    mvKey_H = ...
    mvKey_I = ...
    mvKey_J = ...
    mvKey_K = ...
    mvKey_L = ...
    mvKey_M = ...
    mvKey_N = ...
    mvKey_O = ...
    mvKey_P = ...
    mvKey_Q = ...
    mvKey_R = ...
    mvKey_S = ...
    mvKey_T = ...
    mvKey_U = ...
    mvKey_V = ...
    mvKey_W = ...
    mvKey_X = ...
    mvKey_Y = ...
    mvKey_Z = ...
    mvKey_Back = ...
    mvKey_Tab = ...
    mvKey_Return = ...
    mvKey_LShift = ...
    mvKey_RShift = ...
    mvKey_LControl = ...
    mvKey_RControl = ...
    mvKey_LAlt = ...
    mvKey_RAlt = ...
    mvKey_Pause = ...
    mvKey_CapsLock = ...
    mvKey_Escape = ...
    mvKey_Spacebar = ...
    mvKey_End = ...
    mvKey_Home = ...
    mvKey_Left = ...
    mvKey_Up = ...
    mvKey_Right = ...
    mvKey_Down = ...
    mvKey_Print = ...
    mvKey_Insert = ...
    mvKey_Delete = ...
    mvKey_NumPad0 = ...
    mvKey_NumPad1 = ...
    mvKey_NumPad2 = ...
    mvKey_NumPad3 = ...
    mvKey_NumPad4 = ...
    mvKey_NumPad5 = ...
    mvKey_NumPad6 = ...
    mvKey_NumPad7 = ...
    mvKey_NumPad8 = ...
    mvKey_NumPad9 = ...
    mvKey_Subtract = ...
    mvKey_Decimal = ...
    mvKey_Divide = ...
    mvKey_Multiply = ...
    mvKey_Add = ...
    mvKey_F1 = ...
    mvKey_F2 = ...
    mvKey_F3 = ...
    mvKey_F4 = ...
    mvKey_F5 = ...
    mvKey_F6 = ...
    mvKey_F7 = ...
    mvKey_F8 = ...
    mvKey_F9 = ...
    mvKey_F10 = ...
    mvKey_F11 = ...
    mvKey_F12 = ...
    mvKey_F13 = ...
    mvKey_F14 = ...
    mvKey_F15 = ...
    mvKey_F16 = ...
    mvKey_F17 = ...
    mvKey_F18 = ...
    mvKey_F19 = ...
    mvKey_F20 = ...
    mvKey_F21 = ...
    mvKey_F22 = ...
    mvKey_F23 = ...
    mvKey_F24 = ...
    mvKey_NumLock = ...
    mvKey_ScrollLock = ...
    mvKey_Period = ...
    mvKey_Slash = ...
    mvKey_Backslash = ...
    mvKey_Open_Brace = ...
    mvKey_Close_Brace = ...
    mvKey_Browser_Back = ...
    mvKey_Browser_Forward = ...
    mvKey_Comma = ...
    mvKey_Minus = ...
    mvKey_Menu = ...
    mvKey_ModSuper = ...
    mvKey_ModShift = ...
    mvKey_ModAlt = ...
    mvKey_ModCtrl = ...
    mvAll = ...
    mvTool_About = ...
    mvTool_Debug = ...
    mvTool_Doc = ...
    mvTool_ItemRegistry = ...
    mvTool_Metrics = ...
    mvTool_Stack = ...
    mvTool_Style = ...
    mvTool_Font = ...
    mvFontAtlas = ...
    mvAppUUID = ...
    mvInvalidUUID = ...
    mvDir_None = ...
    mvDir_Left = ...
    mvDir_Right = ...
    mvDir_Up = ...
    mvDir_Down = ...
    mvComboHeight_Small = ...
    mvComboHeight_Regular = ...
    mvComboHeight_Large = ...
    mvComboHeight_Largest = ...
    mvPlatform_Windows = ...
    mvPlatform_Apple = ...
    mvPlatform_Linux = ...
    mvColorEdit_AlphaPreviewNone = ...
    mvColorEdit_AlphaPreview = ...
    mvColorEdit_AlphaPreviewHalf = ...
    mvColorEdit_uint8 = ...
    mvColorEdit_float = ...
    mvColorEdit_rgb = ...
    mvColorEdit_hsv = ...
    mvColorEdit_hex = ...
    mvColorEdit_input_rgb = ...
    mvColorEdit_input_hsv = ...
    mvPlotColormap_Default = ...
    mvPlotColormap_Deep = ...
    mvPlotColormap_Dark = ...
    mvPlotColormap_Pastel = ...
    mvPlotColormap_Paired = ...
    mvPlotColormap_Viridis = ...
    mvPlotColormap_Plasma = ...
    mvPlotColormap_Hot = ...
    mvPlotColormap_Cool = ...
    mvPlotColormap_Pink = ...
    mvPlotColormap_Jet = ...
    mvPlotColormap_Twilight = ...
    mvPlotColormap_RdBu = ...
    mvPlotColormap_BrBG = ...
    mvPlotColormap_PiYG = ...
    mvPlotColormap_Spectral = ...
    mvPlotColormap_Greys = ...
    mvColorPicker_bar = ...
    mvColorPicker_wheel = ...
    mvTabOrder_Reorderable = ...
    mvTabOrder_Fixed = ...
    mvTabOrder_Leading = ...
    mvTabOrder_Trailing = ...
    mvTimeUnit_Us = ...
    mvTimeUnit_Ms = ...
    mvTimeUnit_S = ...
    mvTimeUnit_Min = ...
    mvTimeUnit_Hr = ...
    mvTimeUnit_Day = ...
    mvTimeUnit_Mo = ...
    mvTimeUnit_Yr = ...
    mvDatePickerLevel_Day = ...
    mvDatePickerLevel_Month = ...
    mvDatePickerLevel_Year = ...
    mvCullMode_None = ...
    mvCullMode_Back = ...
    mvCullMode_Front = ...
    mvFontRangeHint_Default = ...
    mvFontRangeHint_Japanese = ...
    mvFontRangeHint_Korean = ...
    mvFontRangeHint_Chinese_Full = ...
    mvFontRangeHint_Chinese_Simplified_Common = ...
    mvFontRangeHint_Cyrillic = ...
    mvFontRangeHint_Thai = ...
    mvFontRangeHint_Vietnamese = ...
    mvNode_PinShape_Circle = ...
    mvNode_PinShape_CircleFilled = ...
    mvNode_PinShape_Triangle = ...
    mvNode_PinShape_TriangleFilled = ...
    mvNode_PinShape_Quad = ...
    mvNode_PinShape_QuadFilled = ...
    mvNode_Attr_Input = ...
    mvNode_Attr_Output = ...
    mvNode_Attr_Static = ...
    mvPlotBin_Sqrt = ...
    mvPlotBin_Sturges = ...
    mvPlotBin_Rice = ...
    mvPlotBin_Scott = ...
    mvXAxis = ...
    mvXAxis2 = ...
    mvXAxis3 = ...
    mvYAxis = ...
    mvYAxis2 = ...
    mvYAxis3 = ...
    mvPlotScale_Linear = ...
    mvPlotScale_Time = ...
    mvPlotScale_Log10 = ...
    mvPlotScale_SymLog = ...
    mvPlotMarker_None = ...
    mvPlotMarker_Circle = ...
    mvPlotMarker_Square = ...
    mvPlotMarker_Diamond = ...
    mvPlotMarker_Up = ...
    mvPlotMarker_Down = ...
    mvPlotMarker_Left = ...
    mvPlotMarker_Right = ...
    mvPlotMarker_Cross = ...
    mvPlotMarker_Plus = ...
    mvPlotMarker_Asterisk = ...
    mvPlot_Location_Center = ...
    mvPlot_Location_North = ...
    mvPlot_Location_South = ...
    mvPlot_Location_West = ...
    mvPlot_Location_East = ...
    mvPlot_Location_NorthWest = ...
    mvPlot_Location_NorthEast = ...
    mvPlot_Location_SouthWest = ...
    mvPlot_Location_SouthEast = ...
    mvNodeMiniMap_Location_BottomLeft = ...
    mvNodeMiniMap_Location_BottomRight = ...
    mvNodeMiniMap_Location_TopLeft = ...
    mvNodeMiniMap_Location_TopRight = ...
    mvTable_SizingFixedFit = ...
    mvTable_SizingFixedSame = ...
    mvTable_SizingStretchProp = ...
    mvTable_SizingStretchSame = ...
    mvFormat_Float_rgba = ...
    mvFormat_Float_rgb = ...
    mvThemeCat_Core = ...
    mvThemeCat_Plots = ...
    mvThemeCat_Nodes = ...
    mvThemeCol_Text = ...
    mvThemeCol_TextDisabled = ...
    mvThemeCol_WindowBg = ...
    mvThemeCol_ChildBg = ...
    mvThemeCol_Border = ...
    mvThemeCol_PopupBg = ...
    mvThemeCol_BorderShadow = ...
    mvThemeCol_FrameBg = ...
    mvThemeCol_FrameBgHovered = ...
    mvThemeCol_FrameBgActive = ...
    mvThemeCol_TitleBg = ...
    mvThemeCol_TitleBgActive = ...
    mvThemeCol_TitleBgCollapsed = ...
    mvThemeCol_MenuBarBg = ...
    mvThemeCol_ScrollbarBg = ...
    mvThemeCol_ScrollbarGrab = ...
    mvThemeCol_ScrollbarGrabHovered = ...
    mvThemeCol_ScrollbarGrabActive = ...
    mvThemeCol_CheckMark = ...
    mvThemeCol_SliderGrab = ...
    mvThemeCol_SliderGrabActive = ...
    mvThemeCol_Button = ...
    mvThemeCol_ButtonHovered = ...
    mvThemeCol_ButtonActive = ...
    mvThemeCol_Header = ...
    mvThemeCol_HeaderHovered = ...
    mvThemeCol_HeaderActive = ...
    mvThemeCol_Separator = ...
    mvThemeCol_SeparatorHovered = ...
    mvThemeCol_SeparatorActive = ...
    mvThemeCol_ResizeGrip = ...
    mvThemeCol_ResizeGripHovered = ...
    mvThemeCol_ResizeGripActive = ...
    mvThemeCol_Tab = ...
    mvThemeCol_TabHovered = ...
    mvThemeCol_TabActive = ...
    mvThemeCol_TabUnfocused = ...
    mvThemeCol_TabUnfocusedActive = ...
    mvThemeCol_PlotLines = ...
    mvThemeCol_PlotLinesHovered = ...
    mvThemeCol_PlotHistogram = ...
    mvThemeCol_PlotHistogramHovered = ...
    mvThemeCol_TableHeaderBg = ...
    mvThemeCol_TableBorderStrong = ...
    mvThemeCol_TableBorderLight = ...
    mvThemeCol_TableRowBg = ...
    mvThemeCol_TableRowBgAlt = ...
    mvThemeCol_TextSelectedBg = ...
    mvThemeCol_DragDropTarget = ...
    mvThemeCol_NavHighlight = ...
    mvThemeCol_NavWindowingHighlight = ...
    mvThemeCol_NavWindowingDimBg = ...
    mvThemeCol_ModalWindowDimBg = ...
    mvPlotCol_Line = ...
    mvPlotCol_Fill = ...
    mvPlotCol_MarkerOutline = ...
    mvPlotCol_MarkerFill = ...
    mvPlotCol_ErrorBar = ...
    mvPlotCol_FrameBg = ...
    mvPlotCol_PlotBg = ...
    mvPlotCol_PlotBorder = ...
    mvPlotCol_LegendBg = ...
    mvPlotCol_LegendBorder = ...
    mvPlotCol_LegendText = ...
    mvPlotCol_TitleText = ...
    mvPlotCol_InlayText = ...
    mvPlotCol_AxisBg = ...
    mvPlotCol_AxisBgActive = ...
    mvPlotCol_AxisBgHovered = ...
    mvPlotCol_AxisGrid = ...
    mvPlotCol_AxisText = ...
    mvPlotCol_Selection = ...
    mvPlotCol_Crosshairs = ...
    mvNodeCol_NodeBackground = ...
    mvNodeCol_NodeBackgroundHovered = ...
    mvNodeCol_NodeBackgroundSelected = ...
    mvNodeCol_NodeOutline = ...
    mvNodeCol_TitleBar = ...
    mvNodeCol_TitleBarHovered = ...
    mvNodeCol_TitleBarSelected = ...
    mvNodeCol_Link = ...
    mvNodeCol_LinkHovered = ...
    mvNodeCol_LinkSelected = ...
    mvNodeCol_Pin = ...
    mvNodeCol_PinHovered = ...
    mvNodeCol_BoxSelector = ...
    mvNodeCol_BoxSelectorOutline = ...
    mvNodeCol_GridBackground = ...
    mvNodeCol_GridLine = ...
    mvNodesCol_GridLinePrimary = ...
    mvNodesCol_MiniMapBackground = ...
    mvNodesCol_MiniMapBackgroundHovered = ...
    mvNodesCol_MiniMapOutline = ...
    mvNodesCol_MiniMapOutlineHovered = ...
    mvNodesCol_MiniMapNodeBackground = ...
    mvNodesCol_MiniMapNodeBackgroundHovered = ...
    mvNodesCol_MiniMapNodeBackgroundSelected = ...
    mvNodesCol_MiniMapNodeOutline = ...
    mvNodesCol_MiniMapLink = ...
    mvNodesCol_MiniMapLinkSelected = ...
    mvNodesCol_MiniMapCanvas = ...
    mvNodesCol_MiniMapCanvasOutline = ...
    mvStyleVar_Alpha = ...
    mvStyleVar_DisabledAlpha = ...
    mvStyleVar_WindowPadding = ...
    mvStyleVar_WindowRounding = ...
    mvStyleVar_WindowBorderSize = ...
    mvStyleVar_WindowMinSize = ...
    mvStyleVar_WindowTitleAlign = ...
    mvStyleVar_ChildRounding = ...
    mvStyleVar_ChildBorderSize = ...
    mvStyleVar_PopupRounding = ...
    mvStyleVar_PopupBorderSize = ...
    mvStyleVar_FramePadding = ...
    mvStyleVar_FrameRounding = ...
    mvStyleVar_FrameBorderSize = ...
    mvStyleVar_ItemSpacing = ...
    mvStyleVar_ItemInnerSpacing = ...
    mvStyleVar_IndentSpacing = ...
    mvStyleVar_CellPadding = ...
    mvStyleVar_ScrollbarSize = ...
    mvStyleVar_ScrollbarRounding = ...
    mvStyleVar_GrabMinSize = ...
    mvStyleVar_GrabRounding = ...
    mvStyleVar_TabRounding = ...
    mvStyleVar_TabBorderSize = ...
    mvStyleVar_TabBarBorderSize = ...
    mvStyleVar_TableAngledHeadersAngle = ...
    mvStyleVar_TableAngledHeadersTextAlign = ...
    mvStyleVar_ButtonTextAlign = ...
    mvStyleVar_SelectableTextAlign = ...
    mvStyleVar_SeparatorTextBorderSize = ...
    mvStyleVar_SeparatorTextAlign = ...
    mvStyleVar_SeparatorTextPadding = ...
    mvPlotStyleVar_LineWeight = ...
    mvPlotStyleVar_Marker = ...
    mvPlotStyleVar_MarkerSize = ...
    mvPlotStyleVar_MarkerWeight = ...
    mvPlotStyleVar_FillAlpha = ...
    mvPlotStyleVar_ErrorBarSize = ...
    mvPlotStyleVar_ErrorBarWeight = ...
    mvPlotStyleVar_DigitalBitHeight = ...
    mvPlotStyleVar_DigitalBitGap = ...
    mvPlotStyleVar_PlotBorderSize = ...
    mvPlotStyleVar_MinorAlpha = ...
    mvPlotStyleVar_MajorTickLen = ...
    mvPlotStyleVar_MinorTickLen = ...
    mvPlotStyleVar_MajorTickSize = ...
    mvPlotStyleVar_MinorTickSize = ...
    mvPlotStyleVar_MajorGridSize = ...
    mvPlotStyleVar_MinorGridSize = ...
    mvPlotStyleVar_PlotPadding = ...
    mvPlotStyleVar_LabelPadding = ...
    mvPlotStyleVar_LegendPadding = ...
    mvPlotStyleVar_LegendInnerPadding = ...
    mvPlotStyleVar_LegendSpacing = ...
    mvPlotStyleVar_MousePosPadding = ...
    mvPlotStyleVar_AnnotationPadding = ...
    mvPlotStyleVar_FitPadding = ...
    mvPlotStyleVar_PlotDefaultSize = ...
    mvPlotStyleVar_PlotMinSize = ...
    mvNodeStyleVar_GridSpacing = ...
    mvNodeStyleVar_NodeCornerRounding = ...
    mvNodeStyleVar_NodePadding = ...
    mvNodeStyleVar_NodeBorderThickness = ...
    mvNodeStyleVar_LinkThickness = ...
    mvNodeStyleVar_LinkLineSegmentsPerLength = ...
    mvNodeStyleVar_LinkHoverDistance = ...
    mvNodeStyleVar_PinCircleRadius = ...
    mvNodeStyleVar_PinQuadSideLength = ...
    mvNodeStyleVar_PinTriangleSideLength = ...
    mvNodeStyleVar_PinLineThickness = ...
    mvNodeStyleVar_PinHoverRadius = ...
    mvNodeStyleVar_PinOffset = ...
    mvNodesStyleVar_MiniMapPadding = ...
    mvNodesStyleVar_MiniMapOffset = ...
    mvKey_Clear = ...
    mvKey_Prior = ...
    mvKey_Next = ...
    mvKey_Select = ...
    mvKey_Execute = ...
    mvKey_LWin = ...
    mvKey_RWin = ...
    mvKey_Apps = ...
    mvKey_Sleep = ...
    mvKey_Help = ...
    mvKey_Browser_Refresh = ...
    mvKey_Browser_Stop = ...
    mvKey_Browser_Search = ...
    mvKey_Browser_Favorites = ...
    mvKey_Browser_Home = ...
    mvKey_Volume_Mute = ...
    mvKey_Volume_Down = ...
    mvKey_Volume_Up = ...
    mvKey_Media_Next_Track = ...
    mvKey_Media_Prev_Track = ...
    mvKey_Media_Stop = ...
    mvKey_Media_Play_Pause = ...
    mvKey_Launch_Mail = ...
    mvKey_Launch_Media_Select = ...
    mvKey_Launch_App1 = ...
    mvKey_Launch_App2 = ...
    mvKey_Colon = ...
    mvKey_Plus = ...
    mvKey_Tilde = ...
    mvKey_Quote = ...
    mvKey_F25 = ...

def show_open_file_dialog(callback, default_location: str = ..., allow_multiple_files: bool = ...) -> None:
    """
    Open the OS file open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    """
    ...

def show_save_file_dialog(callback, default_location: str = ...) -> None:
    """
    Open the OS file save selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected. else, the list
    will contain a single path.

    default_location: optional default location
    """
    ...

def show_open_folder_dialog(callback, default_location: str = ..., allow_multiple_files: bool = ...) -> None:
    """
    Open the OS directory open selection dialog

    callback is a function that will be called with a single
    argument: a list of paths. Can be None or [] if the dialog
    was cancelled or nothing was selected.

    default_location: optional default location
    allow_multiple_files (default to False): if True, allow
        selecting several paths which will be passed to the list
        given to the callback. If False, the list has maximum a
        single argument.
    """
    ...

def color_as_int(val) -> int:
    ...

def color_as_ints(val) -> tuple[int, int, int, int]:
    ...

def color_as_floats(val) -> tuple[float, float, float, float]:
    ...

class mouse_cursor(IntEnum):
    CursorNone = ...
    CursorArrow = ...
    CursorTextInput = ...
    ResizeAll = ...
    ResizeNS = ...
    ResizeEW = ...
    ResizeNESW = ...
    ResizeNWSE = ...
    Hand = ...
    NotAllowed = ...

class positioning(IntEnum):
    DEFAULT = ...
    REL_DEFAULT = ...
    REL_PARENT = ...
    REL_WINDOW = ...
    REL_VIEWPORT = ...


class alignment(IntEnum):
    LEFT = ...
    TOP = ...
    RIGHT = ...
    BOTTOM = ...
    CENTER = ...
    JUSTIFIED = ...
    MANUAL = ...



class theme_enablers(IntEnum):
    t_enabled_any = ...
    t_enabled_False = ...
    t_enabled_True = ...
    t_discarded = ...


class theme_categories(IntEnum):
    t_any = ...
    t_simpleplot = ...
    t_button = ...
    t_combo = ...
    t_checkbox = ...
    t_slider = ...
    t_listbox = ...
    t_radiobutton = ...
    t_inputtext = ...
    t_inputvalue = ...
    t_text = ...
    t_selectable = ...
    t_tab = ...
    t_tabbar = ...
    t_tabbutton = ...
    t_menuitem = ...
    t_progressbar = ...
    t_image = ...
    t_imagebutton = ...
    t_menubar = ...
    t_menu = ...
    t_tooltip = ...
    t_layout = ...
    t_treenode = ...
    t_collapsingheader = ...
    t_child = ...
    t_colorbutton = ...
    t_coloredit = ...
    t_colorpicker = ...
    t_window = ...
    t_plot = ...

class wrap_mutex:
    def __init__(self, target) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> Literal[False]:
        ...
    


class wrap_this_and_parents_mutex:
    def __init__(self, target) -> None:
        ...
    
    def __enter__(self): # -> None:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> Literal[False]:
        ...

''')
    f.write(get_pyi_for_classes(dcg.Context()))